#Task-2
#
#Perform the task-1 using EFS instead of EBS service on the AWS.
#Create/launch Application using Terraform.
#
#1. Create Security group which allow the port 80.
#2. Launch EC2 instance.
#3. In this Ec2 instance use the existing key or provided key and security group which we have created in step 1.
#4. Launch one Volume using the EFS service and attach it in your vpc, then mount that volume into /var/www/html
#5. Developer have uploded the code into github repo also the repo has some images.
#6. Copy the github repo code into /var/www/html
#7. Create S3 bucket, and copy/deploy the images from github repo into the s3 bucket and change the permission to public readable.
#8 Create a Cloudfront using s3 bucket(which contains images) and use the Cloudfront URL to update in code in /var/www/html
#
provider "aws" {
  region = "ap-south-1"
  profile = "pawan"
}
resource "aws_security_group" "nfssg" {
  name = "nfssg"
  description = "Allow TLS inbound traffic"
  vpc_id = "vpc-ef968b87"
 
  ingress {
    description = "SSH"
    from_port = 22
    to_port = 22
    protocol = "tcp"
    cidr_blocks = [ "0.0.0.0/0" ]
}
  ingress {
    description = "HTTP"
    from_port = 80
    to_port = 80
    protocol = "tcp"
    cidr_blocks = [ "0.0.0.0/0" ]
}
  ingress {
    description = "NFS"
    from_port = 2049
    to_port = 2049
    protocol = "tcp"
    cidr_blocks = [ "0.0.0.0/0" ]
}
  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
}
  tags = {
  Name = "nfssg"
}
}
resource "aws_efs_file_system" "allownfs" {
  creation_token = "allownfs"
  tags = {
  Name = "allownfs"
}
}

resource "aws_efs_mount_target" "alpha" {
  file_system_id = "${aws_efs_file_system.allownfs.id}"
  subnet_id = "${aws_subnet.alpha.id}"
  security_groups = [ "${aws_security_group.nfssg.id}" ]
}
resource "aws_subnet" "alpha" {
  vpc_id = "${aws_security_group.nfssg.vpc_id}"
  availability_zone = "ap-south-1a"
  cidr_block = "172.31.48.0/20"
}

resource "aws_instance" "node1" {
  ami = "ami-052c08d70def0ac62"
  instance_type = "t2.micro"
  availability_zone = "ap-south-1a"
  key_name = "pawan"
  subnet_id = "${aws_subnet.alpha.id}"
  vpc_security_group_ids = [ "${aws_security_group.nfssg.id}" ]
  user_data = <<-EOF
    #! /bin/bash
    #cloud-config
    repo_update: true
    repo_upgrade: all
    sudo yum install httpd -y
    sudo systemctl start httpd
    sudo systemctl enable httpd
    yum install -y amazon-efs-utils
    apt-get -y install amazon-efs-utils
    yum install -y nfs-utils
    apt-get -y install nfs-common
    file_system_id_1="${aws_efs_file_system.allownfs.id}"
    efs_mount_point_1="/var/www/html"
    mkdir -p "$efs_mount_point_1"
    test -f "/sbin/mount.efs" && echo "$file_system_id_1:/ $efs_mount_point_1 efs tls,_netdev" >> /etc/fstab || echo "$file_system_id_1.efs.ap-south-1.amazonaws.com:/ $efs_mount_point_1 nfs4 nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport,_netdev 0 0" >> /etc/fstab
    test -f "/sbin/mount.efs" && echo -e "\n[client-info]\nsource=liw" >>/etc/amazon/efs/efs-utils.conf
    mount -a -t efs,nfs4 defaults
    sudo yum install git -y
    cd /var/www/html
    git clone https://github.com/pawankulaura/hybridmulticloud-task1
  EOF
tags = {
Name = "node1"
}
}

